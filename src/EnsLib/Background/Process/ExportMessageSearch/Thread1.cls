/* Copyright (c) 2021 by InterSystems Corporation.
   Cambridge, Massachusetts, U.S.A.  All rights reserved.
   Confidential property of InterSystems Corporation. */

/// This class is generated by the EnsLib.Background.Process.ExportMessageSearch BPL class.
/// This class should not be edited or modified in any way.
/// Do not make direct use of this class in your application.
Class EnsLib.Background.Process.ExportMessageSearch.Thread1 Extends Ens.BP.Thread [ ClassType = persistent, CompileAfter = EnsLib.Background.Process.ExportMessageSearch, GeneratedBy = Ens.BPL.Compiler.CLS, ProcedureBlock ]
{

Method S1(process As Ens.BusinessProcess, context As Ens.BP.Context, synctimedout As %Boolean, syncresponses As %ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"), request As %Library.Persistent, response As %Library.Persistent) As %Status [ Language = objectscript, PublicList = (process, context) ]
{
 Set $ZT="Trap",status=$$$OK do {
 If (process.WorkFlowRole="") {
 Set ..%NextState="S3"
 } else {
 Set ..%NextState="S4"
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S1") Goto Exit
}

Method S10(process As Ens.BusinessProcess, context As Ens.BP.Context, synctimedout As %Boolean, syncresponses As %ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"), request As %Library.Persistent, response As %Library.Persistent) As %Status [ Language = objectscript, PublicList = (process, context) ]
{
 Set $ZT="Trap",status=$$$OK do {
 If (context.WaitOnWorkFlow) {
  Set ..%NextState="S12"
 } else {
  Set ..%NextState="S11"
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S10") Goto Exit
}

Method S11(process As Ens.BusinessProcess, context As Ens.BP.Context, synctimedout As %Boolean, syncresponses As %ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"), request As %Library.Persistent, response As %Library.Persistent) As %Status [ Language = objectscript, PublicList = (process, context) ]
{
 Set $ZT="Trap",status=$$$OK do {
 Set ..%NextState="S5"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S11") Goto Exit
}

Method S12(process As Ens.BusinessProcess, context As Ens.BP.Context, synctimedout As %Boolean, syncresponses As %ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"), request As %Library.Persistent, response As %Library.Persistent) As %Status [ Language = objectscript, PublicList = (process, context) ]
{
 Set $ZT="Trap",status=$$$OK do {
 #; --- Begin Call Seek Confirmation ---
 #; --- Begin Request ---
 Set callrequest=##class(EnsLib.Background.Workflow.ExportRequest).%New()
 If '$IsObject(callrequest) Set status=%objlasterror Quit
 Set status=$$$OK,callrequest.%Actions="Confirm,Cancel Request,-Relinquish"
 If $$$ISERR(status) Quit
 Set status=$$$OK,callrequest.%Subject="Please confirm or cancel work request "
 If $$$ISERR(status) Quit
 Set status=$$$OK,callrequest.%UserName=context.ConfirmUser
 If $$$ISERR(status) Quit
 Set status=$$$OK,callrequest.%Command=context.WorkFlowRole
 If $$$ISERR(status) Quit
 Set status=$$$OK,callrequest.%Message="Export of messages requested by "_request.RequestedByUsername
 If $$$ISERR(status) Quit
 Set status=..MakeAsyncCall("OnResponse1","EnsLib.Background.Workflow.Operation",callrequest,"Seek Confirmation",1,0,"Seek Confirmation",0)
 If $$$ISERR(status) Quit
 Kill callrequest
 #; --- End Request ---
 #; --- End Call Seek Confirmation ---
 Do ..%PendingResponses.Clear(),..%SyncResponses.Clear()
 Set ..%SyncTimedOut=0,..%PendingTimeout="",..%PendingAlarmHandle="",..%SyncName=""
 If ..%Process.IsResponsePending("Seek Confirmation") Do ..%PendingResponses.SetAt("","Seek Confirmation")
 If ..%PendingResponses.Count()=0 {
    Set ..%NextState="S14"
 } else {
    Set ..%NextState="S13",..%Wait=1
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S12") Goto Exit
}

Method S13(process As Ens.BusinessProcess, context As Ens.BP.Context, synctimedout As %Boolean, syncresponses As %ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"), request As %Library.Persistent, response As %Library.Persistent) As %Status [ Language = objectscript, PublicList = (process, context) ]
{
 Set $ZT="Trap",status=$$$OK do {
 If ..%PendingResponses.Count()=0 {
    Set ..%NextState="S14"
 } else {
    Set ..%NextState="S13",..%Wait=1
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S13") Goto Exit
}

Method S14(process As Ens.BusinessProcess, context As Ens.BP.Context, synctimedout As %Boolean, syncresponses As %ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"), request As %Library.Persistent, response As %Library.Persistent) As %Status [ Language = objectscript, PublicList = (process, context) ]
{
 Set $ZT="Trap",status=$$$OK do {
 Set status=$$$OK,context.WaitOnWorkFlow=0
 If $$$ISERR(status) Quit
 Set ..%NextState="S10"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S14") Goto Exit
}

Method S15(process As Ens.BusinessProcess, context As Ens.BP.Context, synctimedout As %Boolean, syncresponses As %ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"), request As %Library.Persistent, response As %Library.Persistent) As %Status [ Language = objectscript, PublicList = (process, context) ]
{
 Set $ZT="Trap",status=$$$OK do {
 Set status=$$$OK,context.ConfirmAction="Confirm"
 If $$$ISERR(status) Quit
 Set ..%NextState="S5"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S15") Goto Exit
}

Method S16(process As Ens.BusinessProcess, context As Ens.BP.Context, synctimedout As %Boolean, syncresponses As %ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"), request As %Library.Persistent, response As %Library.Persistent) As %Status [ Language = objectscript, PublicList = (process, context) ]
{
 Set $ZT="Trap",status=$$$OK do {
 Do process.ClearAllPendingResponses()
 Set ..%NextState="Stop"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S16") Goto Exit
}

Method S17(process As Ens.BusinessProcess, context As Ens.BP.Context, synctimedout As %Boolean, syncresponses As %ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"), request As %Library.Persistent, response As %Library.Persistent) As %Status [ Language = objectscript, PublicList = (process, context) ]
{
 Set $ZT="Trap",status=$$$OK do {
 Do {

 	Set tSC = $$$OK
 	Try {
 		#; Open Saved Search
 		Set tSavedSearch = $classmethod(request.SearchClass,"%OpenId",request.SavedSearch,,.tSC)
 		If $$$ISERR(tSC) Quit

 		#; Run the search based on saved search
 		Set tFilter = tSavedSearch.Filter
 		Set tAssistantClass=##class(EnsPortal.MessageViewer).GetAssistantClass()
 		Set tSC = $classmethod(tAssistantClass,"GetResultSet",tFilter, .tSearchResultSet)
 		If $$$ISERR(tSC) Quit

 		#; Create temporary export file from the results
 		$$$LOGINFO("Creating Temporary File for: "_request.RequestedByUsername)
 		#dim tFileKey = $$$JobSessionId
 		Set context.TemporaryExportFilename = ##class(EnsPortal.Dialog.ExportMessages).tempServerFilename(request.LocalFilename,tFileKey,request.RequestedByUsername)
 		Set tExportInfo = ##class(EnsPortal.Dialog.ExportMessages).CreateTempFile(request.LocalFilename,tFileKey, request.CharSet, request.MsgSeperators,tSearchResultSet,request.RequestedByUsername)

 		#; Create a link to the temporary file so that it is deleted when the process completes/purged
 		If (context.TemporaryExportFilename'="") && ##class(%Library.File).Exists(context.TemporaryExportFilename) {
 			Set context.TemporaryExportFile = ##class(%Stream.FileBinary).%New()
 			Do context.TemporaryExportFile.LinkToFile(context.TemporaryExportFilename)
 			Set context.MD5Hash = $SYSTEM.Encryption.MD5HashStream(context.TemporaryExportFile,.status)
		 	$$$LOGINFO("Finished creating temporary file: "_context.TemporaryExportFilename)
 		}

 	} Catch ex {

	 	Set tSC = ex.AsStatus()

	 }

 	#; Delete saved search
 	If $classmethod(request.SearchClass,"%Extends","EnsPortal.MsgFilter.SavedSearch") && ($Extract(request.SavedSearch,1,18)="z_QueuedForExport_") {
	 	Set tSC = $$$ADDSC(tSC,$classmethod(request.SearchClass,"%DeleteId",request.SavedSearch))
 	}
 	If $$$ISERR(tSC) {
 		Set status = tSC
 	}

 
 } while (0)
 If $$$ISERR(status) Quit
 Set status=$$$OK,context.WaitOnWorkFlow=1
 If $$$ISERR(status) Quit
 Set ..%NextState="S18"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S17") Goto Exit
}

Method S18(process As Ens.BusinessProcess, context As Ens.BP.Context, synctimedout As %Boolean, syncresponses As %ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"), request As %Library.Persistent, response As %Library.Persistent) As %Status [ Language = objectscript, PublicList = (process, context) ]
{
 Set $ZT="Trap",status=$$$OK do {
 If (context.WaitOnWorkFlow) {
  Set ..%NextState="S20"
 } else {
  Set ..%NextState="S19"
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S18") Goto Exit
}

Method S19(process As Ens.BusinessProcess, context As Ens.BP.Context, synctimedout As %Boolean, syncresponses As %ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"), request As %Library.Persistent, response As %Library.Persistent) As %Status [ Language = objectscript, PublicList = (process, context) ]
{
 Set $ZT="Trap",status=$$$OK do {
 Set ..%NextState="S16"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S19") Goto Exit
}

Method S2(process As Ens.BusinessProcess, context As Ens.BP.Context, synctimedout As %Boolean, syncresponses As %ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"), request As %Library.Persistent, response As %Library.Persistent) As %Status [ Language = objectscript, PublicList = (process, context) ]
{
 Set $ZT="Trap",status=$$$OK do {
 If (process.ConfirmationRequired) {
 Set ..%NextState="S6"
 } else {
 Set ..%NextState="S15"
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S2") Goto Exit
}

Method S20(process As Ens.BusinessProcess, context As Ens.BP.Context, synctimedout As %Boolean, syncresponses As %ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"), request As %Library.Persistent, response As %Library.Persistent) As %Status [ Language = objectscript, PublicList = (process, context) ]
{
 Set $ZT="Trap",status=$$$OK do {
 #; --- Begin Call WorkFlow notification Of Download ---
 #; --- Begin Request ---
 Set callrequest=##class(EnsLib.Background.Workflow.ExportRequest).%New()
 If '$IsObject(callrequest) Set status=%objlasterror Quit
 Set status=$$$OK,callrequest.%Actions="Completed Download,-Relinquish,-Save"
 If $$$ISERR(status) Quit
 Set status=$$$OK,callrequest.%UserName=request.RequestedByUsername
 If $$$ISERR(status) Quit
 Set status=$$$OK,callrequest.%FormTemplate="EnsLib.Background.Workflow.Template.DownloadExport.cls"
 If $$$ISERR(status) Quit
 Set status=$$$OK,callrequest.%Command=context.WorkFlowRole
 If $$$ISERR(status) Quit
 Set status=$$$OK,callrequest.%Subject="Exported File available for download"
 If $$$ISERR(status) Quit
 Set status=$$$OK,callrequest.%FormFields="TemporaryExportFilename,CharSet,LocalFilename,FileKey,MD5Hash"
 If $$$ISERR(status) Quit
 Set status=callrequest.%FormValues.SetAt(context.TemporaryExportFilename,"TemporaryExportFilename")
 If $$$ISERR(status) Quit
 Set status=callrequest.%FormValues.SetAt(request.CharSet,"CharSet")
 If $$$ISERR(status) Quit
 Set status=callrequest.%FormValues.SetAt(request.LocalFilename,"LocalFilename")
 If $$$ISERR(status) Quit
 Set status=callrequest.%FormValues.SetAt($$$JobSessionId,"FileKey")
 If $$$ISERR(status) Quit
 Set status=callrequest.%FormValues.SetAt(context.MD5Hash,"MD5Hash")
 If $$$ISERR(status) Quit
 Set status=..MakeAsyncCall("","EnsLib.Background.Workflow.Operation",callrequest,"WorkFlow notification Of Download",1,0,"WorkFlow notification Of Download",0)
 If $$$ISERR(status) Quit
 Kill callrequest
 #; --- End Request ---
 #; --- End Call WorkFlow notification Of Download ---
 Do ..%PendingResponses.Clear(),..%SyncResponses.Clear()
 Set ..%SyncTimedOut=0,..%PendingTimeout="",..%PendingAlarmHandle="",..%SyncName=""
 If ..%Process.IsResponsePending("WorkFlow notification Of Download") Do ..%PendingResponses.SetAt("","WorkFlow notification Of Download")
 If ..%PendingResponses.Count()=0 {
    Set ..%NextState="S22"
 } else {
    Set ..%NextState="S21",..%Wait=1
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S20") Goto Exit
}

Method S21(process As Ens.BusinessProcess, context As Ens.BP.Context, synctimedout As %Boolean, syncresponses As %ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"), request As %Library.Persistent, response As %Library.Persistent) As %Status [ Language = objectscript, PublicList = (process, context) ]
{
 Set $ZT="Trap",status=$$$OK do {
 If ..%PendingResponses.Count()=0 {
    Set ..%NextState="S22"
 } else {
    Set ..%NextState="S21",..%Wait=1
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S21") Goto Exit
}

Method S22(process As Ens.BusinessProcess, context As Ens.BP.Context, synctimedout As %Boolean, syncresponses As %ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"), request As %Library.Persistent, response As %Library.Persistent) As %Status [ Language = objectscript, PublicList = (process, context) ]
{
 Set $ZT="Trap",status=$$$OK do {
 Set status=$$$OK,context.WaitOnWorkFlow=0
 If $$$ISERR(status) Quit
 Set ..%NextState="S18"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S22") Goto Exit
}

Method S23(process As Ens.BusinessProcess, context As Ens.BP.Context, synctimedout As %Boolean, syncresponses As %ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"), request As %Library.Persistent, response As %Library.Persistent) As %Status [ Language = objectscript, PublicList = (process, context) ]
{
 Set $ZT="Trap",status=$$$OK do {
 Do {
 If $classmethod(request.SearchClass,"%Extends","EnsPortal.MsgFilter.SavedSearch") && ($Extract(request.SavedSearch,1,18)="z_QueuedForExport_") {
  Set tSC = $classmethod(request.SearchClass,"%DeleteId",request.SavedSearch)
 }
 } while (0)
 If $$$ISERR(status) Quit
 Set ..%NextState="S16"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S23") Goto Exit
}

Method S3(process As Ens.BusinessProcess, context As Ens.BP.Context, synctimedout As %Boolean, syncresponses As %ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"), request As %Library.Persistent, response As %Library.Persistent) As %Status [ Language = objectscript, PublicList = (process, context) ]
{
 Set $ZT="Trap",status=$$$OK do {
 Set status=$$$OK,context.WorkFlowRole=request.WorkFlowRole
 If $$$ISERR(status) Quit
 Set ..%NextState="S2"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S3") Goto Exit
}

Method S4(process As Ens.BusinessProcess, context As Ens.BP.Context, synctimedout As %Boolean, syncresponses As %ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"), request As %Library.Persistent, response As %Library.Persistent) As %Status [ Language = objectscript, PublicList = (process, context) ]
{
 Set $ZT="Trap",status=$$$OK do {
 Set status=$$$OK,context.WorkFlowRole=process.WorkFlowRole
 If $$$ISERR(status) Quit
 Set ..%NextState="S2"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S4") Goto Exit
}

Method S5(process As Ens.BusinessProcess, context As Ens.BP.Context, synctimedout As %Boolean, syncresponses As %ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"), request As %Library.Persistent, response As %Library.Persistent) As %Status [ Language = objectscript, PublicList = (process, context) ]
{
 Set $ZT="Trap",status=$$$OK do {
 If (context.ConfirmAction="Confirm") {
 Set ..%NextState="S17"
 } else {
 Set ..%NextState="S23"
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S5") Goto Exit
}

Method S6(process As Ens.BusinessProcess, context As Ens.BP.Context, synctimedout As %Boolean, syncresponses As %ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"), request As %Library.Persistent, response As %Library.Persistent) As %Status [ Language = objectscript, PublicList = (process, context) ]
{
 Set $ZT="Trap",status=$$$OK do {
 If (process.ConfirmationByRequestor) {
 Set ..%NextState="S8"
 } else {
 Set ..%NextState="S9"
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S6") Goto Exit
}

Method S7(process As Ens.BusinessProcess, context As Ens.BP.Context, synctimedout As %Boolean, syncresponses As %ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"), request As %Library.Persistent, response As %Library.Persistent) As %Status [ Language = objectscript, PublicList = (process, context) ]
{
 Set $ZT="Trap",status=$$$OK do {
 Set ..%NextState="S10"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S7") Goto Exit
}

Method S8(process As Ens.BusinessProcess, context As Ens.BP.Context, synctimedout As %Boolean, syncresponses As %ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"), request As %Library.Persistent, response As %Library.Persistent) As %Status [ Language = objectscript, PublicList = (process, context) ]
{
 Set $ZT="Trap",status=$$$OK do {
 Set status=$$$OK,context.ConfirmUser=request.RequestedByUsername
 If $$$ISERR(status) Quit
 Set ..%NextState="S7"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S8") Goto Exit
}

Method S9(process As Ens.BusinessProcess, context As Ens.BP.Context, synctimedout As %Boolean, syncresponses As %ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"), request As %Library.Persistent, response As %Library.Persistent) As %Status [ Language = objectscript, PublicList = (process, context) ]
{
 Set $ZT="Trap",status=$$$OK do {
 Set status=$$$OK,context.ConfirmUser=process.ConfirmUser
 If $$$ISERR(status) Quit
 Set ..%NextState="S7"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S9") Goto Exit
}

Storage Default
{
<Type>%Storage.Persistent</Type>
}

}
