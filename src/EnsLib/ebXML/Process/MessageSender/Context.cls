/* Copyright (c) 2021 by InterSystems Corporation.
   Cambridge, Massachusetts, U.S.A.  All rights reserved.
   Confidential property of InterSystems Corporation. */

Include EnsebXML

/// This class is generated by the EnsLib.ebXML.Process.MessageSender BPL class.
/// This class should not be edited or modified in any way.
/// Do not make direct use of this class in your application.
Class EnsLib.ebXML.Process.MessageSender.Context Extends Ens.BP.Context [ ClassType = persistent, CompileAfter = EnsLib.ebXML.Process.MessageSender, GeneratedBy = Ens.BPL.Compiler.CLS, ProcedureBlock ]
{

Property Ack As EnsLib.ebXML.Message;

Property CPA As EnsLib.ebXML.CPA;

Property ErrorStatus As %Status [ InitialExpression = {$$$OK} ];

Property Try As %Integer [ InitialExpression = 0 ];

/// Response Handler for call to @process.OutboundTarget
Method OnResponse1(process As Ens.BusinessProcess, context As Ens.BP.Context, request As EnsLib.ebXML.Message, response As EnsLib.ebXML.Message, callrequest As EnsLib.ebXML.Message, callresponse As EnsLib.ebXML.Message, callname As %String) As %Status [ Language = objectscript, PublicList = (process, context) ]
{
 Set $ZT="Trap",status=$$$OK do {
 Set status=$$$OK,context.Ack=callresponse
 If $$$ISERR(status) Quit
 Set status=$$$OK,context.ErrorStatus=$S($IsObject(callresponse):callresponse.MessageErrorStatus(),1:$$$OK)
 If $$$ISERR(status) Quit
 } while (0)
Exit Quit status
Trap Set $ZT="",status=##class(Ens.Util.Error).EnsSystemError("EnsLib.ebXML.Process.MessageSender.Thread1","OnResponse1")
 Goto Exit
}

/// Response Handler for call to EnsLib.ebXML.Operation.MessageTracker
Method OnResponse2(process As Ens.BusinessProcess, context As Ens.BP.Context, request As EnsLib.ebXML.Message, response As EnsLib.ebXML.Message, callrequest As EnsLib.ebXML.Operation.MessageTrackerTrackAcknowledgement, callresponse As EnsLib.ebXML.Message, callname As %String) As %Status [ Language = objectscript, PublicList = (process, context) ]
{
 Set $ZT="Trap",status=$$$OK do {
 Set status=$$$OK,context.Ack=callresponse
 If $$$ISERR(status) Quit
 } while (0)
Exit Quit status
Trap Set $ZT="",status=##class(Ens.Util.Error).EnsSystemError("EnsLib.ebXML.Process.MessageSender.Thread1","OnResponse2")
 Goto Exit
}

/// Response Handler for call to @process.OutboundTarget
Method OnResponse3(process As Ens.BusinessProcess, context As Ens.BP.Context, request As EnsLib.ebXML.Message, response As EnsLib.ebXML.Message, callrequest As EnsLib.ebXML.Message, callresponse As EnsLib.ebXML.Message, callname As %String) As %Status [ Language = objectscript, PublicList = (process, context) ]
{
 Set $ZT="Trap",status=$$$OK do {
 Set status=$$$OK,context.ErrorStatus=$S($IsObject(callresponse):callresponse.MessageErrorStatus(),1:$$$OK)
 If $$$ISERR(status) Quit
 } while (0)
Exit Quit status
Trap Set $ZT="",status=##class(Ens.Util.Error).EnsSystemError("EnsLib.ebXML.Process.MessageSender.Thread1","OnResponse3")
 Goto Exit
}

/// Response Handler for call to @process.OutboundTarget
Method OnResponse4(process As Ens.BusinessProcess, context As Ens.BP.Context, request As EnsLib.ebXML.Message, response As EnsLib.ebXML.Message, callrequest As EnsLib.ebXML.Message, callresponse As EnsLib.ebXML.Message, callname As %String) As %Status [ Language = objectscript, PublicList = (process, context) ]
{
 Set $ZT="Trap",status=$$$OK do {
 Set status=$$$OK,status=$S($IsObject(callresponse):callresponse.MessageErrorStatus(),1:$$$OK)
 If $$$ISERR(status) Quit
 } while (0)
Exit Quit status
Trap Set $ZT="",status=##class(Ens.Util.Error).EnsSystemError("EnsLib.ebXML.Process.MessageSender.Thread1","OnResponse4")
 Goto Exit
}

Storage Default
{
<Data name="ContextDefaultData1">
<Subscript>"Context"</Subscript>
<Value name="1">
<Value>Ack</Value>
</Value>
<Value name="2">
<Value>CPA</Value>
</Value>
<Value name="3">
<Value>ErrorStatus</Value>
</Value>
<Value name="4">
<Value>Try</Value>
</Value>
</Data>
<DefaultData>ContextDefaultData1</DefaultData>
<Type>%Storage.Persistent</Type>
}

}
