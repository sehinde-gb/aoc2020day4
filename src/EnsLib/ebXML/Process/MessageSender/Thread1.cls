/* Copyright (c) 2021 by InterSystems Corporation.
   Cambridge, Massachusetts, U.S.A.  All rights reserved.
   Confidential property of InterSystems Corporation. */

Include EnsebXML

/// This class is generated by the EnsLib.ebXML.Process.MessageSender BPL class.
/// This class should not be edited or modified in any way.
/// Do not make direct use of this class in your application.
Class EnsLib.ebXML.Process.MessageSender.Thread1 Extends Ens.BP.Thread [ ClassType = persistent, CompileAfter = EnsLib.ebXML.Process.MessageSender, GeneratedBy = Ens.BPL.Compiler.CLS, ProcedureBlock ]
{

Method S1(process As Ens.BusinessProcess, context As Ens.BP.Context, synctimedout As %Boolean, syncresponses As %ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"), request As %Library.Persistent, response As %Library.Persistent) As %Status [ Language = objectscript, PublicList = (process, context) ]
{
 Set $ZT="Trap",status=$$$OK do {
 Set status=$$$OK,context.CPA=##class(EnsLib.ebXML.CPA).CPAForMessage(request,.status)
 If $$$ISERR(status) Quit
 If ((context.CPA.AckRequested="always") && 'request.IsAcknowledgment() && (context.CPA.SyncReplyMode="mshSignalsOnly")) {
 Set ..%NextState="S3"
 } elseif ((context.CPA.AckRequested="always") && 'request.IsAcknowledgment() && (context.CPA.SyncReplyMode'="mshSignalsOnly")) {
 Set ..%NextState="S21"
 } else {
 Set ..%NextState="S41"
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S1") Goto Exit
}

Method S10(process As Ens.BusinessProcess, context As Ens.BP.Context, synctimedout As %Boolean, syncresponses As %ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"), request As %Library.Persistent, response As %Library.Persistent) As %Status [ Language = objectscript, PublicList = (process, context) ]
{
 Set $ZT="Trap",status=$$$OK do {
 Set ..%NextState="S11"
 #; Remove this scopes fault handler
 $$$Pop(..%HandlerStack)
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S10") Goto Exit
}

Method S11(process As Ens.BusinessProcess, context As Ens.BP.Context, synctimedout As %Boolean, syncresponses As %ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"), request As %Library.Persistent, response As %Library.Persistent) As %Status [ Language = objectscript, PublicList = (process, context) ]
{
 Set $ZT="Trap",status=$$$OK do {
 If (($IsObject(context.Ack) && context.Ack.IsAcknowledgmentTo(request))) {
 Set ..%NextState="S15"
 } else {
 Set ..%NextState="S16"
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S11") Goto Exit
}

Method S12(process As Ens.BusinessProcess, context As Ens.BP.Context, synctimedout As %Boolean, syncresponses As %ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"), request As %Library.Persistent, response As %Library.Persistent) As %Status [ Language = objectscript, PublicList = (process, context) ]
{
 Set $ZT="Trap",status=$$$OK do {
 Set ..%NextState="S11"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S12") Goto Exit
}

Method S13(process As Ens.BusinessProcess, context As Ens.BP.Context, synctimedout As %Boolean, syncresponses As %ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"), request As %Library.Persistent, response As %Library.Persistent) As %Status [ Language = objectscript, PublicList = (process, context) ]
{
 Set $ZT="Trap",status=$$$OK do {
 Set status=$$$OK,context.Ack=$$$NULLOREF
 If $$$ISERR(status) Quit
 Set ..%NextState="S12"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S13") Goto Exit
}

Method S14(process As Ens.BusinessProcess, context As Ens.BP.Context, synctimedout As %Boolean, syncresponses As %ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"), request As %Library.Persistent, response As %Library.Persistent) As %Status [ Language = objectscript, PublicList = (process, context) ]
{
 Set $ZT="Trap",status=$$$OK do {
 Set status=$$$OK,status=context.ErrorStatus
 If $$$ISERR(status) Quit
 Set ..%NextState="S4"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S14") Goto Exit
}

Method S15(process As Ens.BusinessProcess, context As Ens.BP.Context, synctimedout As %Boolean, syncresponses As %ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"), request As %Library.Persistent, response As %Library.Persistent) As %Status [ Language = objectscript, PublicList = (process, context) ]
{
 Set $ZT="Trap",status=$$$OK do {
 Set ..%NextState="S5"
 Quit
 Set ..%NextState="S14"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S15") Goto Exit
}

Method S16(process As Ens.BusinessProcess, context As Ens.BP.Context, synctimedout As %Boolean, syncresponses As %ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"), request As %Library.Persistent, response As %Library.Persistent) As %Status [ Language = objectscript, PublicList = (process, context) ]
{
 Set $ZT="Trap",status=$$$OK do {
 Do ..%PendingResponses.Clear(),..%SyncResponses.Clear()
 Set ..%SyncTimedOut=0,..%PendingTimeout="",..%PendingAlarmHandle="",..%SyncName=""
 For tI=1:1:$Length(("RetryInterval"_context.Try),",") {
    If ..%Process.IsResponsePending($Piece(("RetryInterval"_context.Try),",",tI)) Do ..%PendingResponses.SetAt("",$Piece(("RetryInterval"_context.Try),",",tI))
 }
 If ..%PendingResponses.Count()>0 {
    Set %name="",%alarmhandle=""
    Set status=..%Process.MakeTimerCall("_Timeout",.%name,context.CPA.RetryInterval,("RetryInterval"_context.Try),.%alarmhandle,"Wait for RetryInterval")
    If $$$ISERR(status) Quit
    Do ..%PendingResponses.SetAt("",%name) Set ..%PendingTimeout=%name,..%PendingAlarmHandle=%alarmhandle,..%SyncName="Wait for RetryInterval"
 }
 If ..%PendingResponses.Count()=0 {
    Set ..%NextState="S18"
 } else {
    Set ..%NextState="S17",..%Wait=1
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S16") Goto Exit
}

Method S17(process As Ens.BusinessProcess, context As Ens.BP.Context, synctimedout As %Boolean, syncresponses As %ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"), request As %Library.Persistent, response As %Library.Persistent) As %Status [ Language = objectscript, PublicList = (process, context) ]
{
 Set $ZT="Trap",status=$$$OK do {
 If ..%PendingResponses.Count()=0 {
    Set ..%NextState="S18"
 } else {
    Set ..%NextState="S17",..%Wait=1
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S17") Goto Exit
}

Method S18(process As Ens.BusinessProcess, context As Ens.BP.Context, synctimedout As %Boolean, syncresponses As %ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"), request As %Library.Persistent, response As %Library.Persistent) As %Status [ Language = objectscript, PublicList = (process, context) ]
{
 Set $ZT="Trap",status=$$$OK do {
 Set status=$$$OK,context.Try=context.Try+1
 If $$$ISERR(status) Quit
 Set ..%NextState="S14"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S18") Goto Exit
}

Method S19(process As Ens.BusinessProcess, context As Ens.BP.Context, synctimedout As %Boolean, syncresponses As %ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"), request As %Library.Persistent, response As %Library.Persistent) As %Status [ Language = objectscript, PublicList = (process, context) ]
{
 Set $ZT="Trap",status=$$$OK do {
 Set ..%NextState="S2"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S19") Goto Exit
}

Method S2(process As Ens.BusinessProcess, context As Ens.BP.Context, synctimedout As %Boolean, syncresponses As %ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"), request As %Library.Persistent, response As %Library.Persistent) As %Status [ Language = objectscript, PublicList = (process, context) ]
{
 Set $ZT="Trap",status=$$$OK do {
 If ($IsObject(response) && 'response.IsResponseTo(request)) {
 Set ..%NextState="S45"
 } else {
 Set ..%NextState="S44"
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S2") Goto Exit
}

Method S20(process As Ens.BusinessProcess, context As Ens.BP.Context, synctimedout As %Boolean, syncresponses As %ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"), request As %Library.Persistent, response As %Library.Persistent) As %Status [ Language = objectscript, PublicList = (process, context) ]
{
 Set $ZT="Trap",status=$$$OK do {
 Set status=$$$OK,status=$$$ERROR($$$EnsebXMLErrUndeliverableMessage)
 If $$$ISERR(status) Quit
 Set ..%NextState="S19"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S20") Goto Exit
}

Method S21(process As Ens.BusinessProcess, context As Ens.BP.Context, synctimedout As %Boolean, syncresponses As %ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"), request As %Library.Persistent, response As %Library.Persistent) As %Status [ Language = objectscript, PublicList = (process, context) ]
{
 Set $ZT="Trap",status=$$$OK do {
 #; --- Begin Call Prefetch Ack ---
 #; --- Begin Request ---
 Set callrequest=##class(EnsLib.ebXML.Operation.MessageTrackerTrackAcknowledgement).%New()
 If '$IsObject(callrequest) Set status=%objlasterror Quit
 Set status=$$$OK,callrequest.Request=request
 If $$$ISERR(status) Quit
 Set status=..MakeAsyncCall("OnResponse2","EnsLib.ebXML.Operation.MessageTracker",callrequest,"Prefetch Ack",1,0,"Prefetch Ack",0)
 If $$$ISERR(status) Quit
 Kill callrequest
 #; --- End Request ---
 #; --- End Call Prefetch Ack ---
 Set ..%NextState="S22"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S21") Goto Exit
}

Method S22(process As Ens.BusinessProcess, context As Ens.BP.Context, synctimedout As %Boolean, syncresponses As %ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"), request As %Library.Persistent, response As %Library.Persistent) As %Status [ Language = objectscript, PublicList = (process, context) ]
{
 Set $ZT="Trap",status=$$$OK do {
 If (context.Try<context.CPA.Retries) {
  Set ..%NextState="S24"
 } else {
  Set ..%NextState="S23"
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S22") Goto Exit
}

Method S23(process As Ens.BusinessProcess, context As Ens.BP.Context, synctimedout As %Boolean, syncresponses As %ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"), request As %Library.Persistent, response As %Library.Persistent) As %Status [ Language = objectscript, PublicList = (process, context) ]
{
 Set $ZT="Trap",status=$$$OK do {
 If (('$IsObject(context.Ack) || 'context.Ack.IsAcknowledgmentTo(request))) {
 Set ..%NextState="S40"
 } else {
 Set ..%NextState="S39"
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S23") Goto Exit
}

Method S24(process As Ens.BusinessProcess, context As Ens.BP.Context, synctimedout As %Boolean, syncresponses As %ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"), request As %Library.Persistent, response As %Library.Persistent) As %Status [ Language = objectscript, PublicList = (process, context) ]
{
 Set $ZT="Trap",status=$$$OK do {
 #; --- Begin Call @("RetryInterval"_context.Try) ---
 #; --- Begin Request ---
 Set callrequest=##class(Ens.AlarmRequest).%New()
 If '$IsObject(callrequest) Set status=%objlasterror Quit
 Set status=$$$OK,callrequest.Timeout=context.CPA.RetryInterval
 If $$$ISERR(status) Quit
 Set status=..MakeAsyncCall("","Ens.Alarm",callrequest,("RetryInterval"_context.Try),0,0,("RetryInterval"_context.Try),0)
 If $$$ISERR(status) Quit
 Kill callrequest
 #; --- End Request ---
 #; --- End Call @("RetryInterval"_context.Try) ---
 #; Establish a state for the Scope beginning
 Set ..%NextState="S25"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S24") Goto Exit
}

Method S25(process As Ens.BusinessProcess, context As Ens.BP.Context, synctimedout As %Boolean, syncresponses As %ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"), request As %Library.Persistent, response As %Library.Persistent) As %Status [ Language = objectscript, PublicList = (process, context) ]
{
 Set $ZT="Trap",status=$$$OK do {
 #; Establish fault handler
 $$$Push("S26",..%HandlerStack)
 #; --- Begin Call Dispatch Message ---
 #; --- Begin Request ---
 Set callrequest=##class(EnsLib.ebXML.Message).%New()
 If '$IsObject(callrequest) Set status=%objlasterror Quit
 Set status=$$$OK,callrequest=request
 If $$$ISERR(status) Quit
 Set status=..MakeAsyncCall("OnResponse3",process.OutboundTarget,callrequest,"Dispatch Message",1,0,"Dispatch Message",1)
 If $$$ISERR(status) Quit
 Kill callrequest
 #; --- End Request ---
 #; --- End Call Dispatch Message ---
 Do ..%PendingResponses.Clear(),..%SyncResponses.Clear()
 Set ..%SyncTimedOut=0,..%PendingTimeout="",..%PendingAlarmHandle="",..%SyncName=""
 If ..%Process.IsResponsePending("Dispatch Message") Do ..%PendingResponses.SetAt("","Dispatch Message")
 If ..%PendingResponses.Count()>0 {
    Set %name="",%alarmhandle=""
    Set status=..%Process.MakeTimerCall("_Timeout",.%name,context.CPA.RetryInterval,"Dispatch Message",.%alarmhandle,"")
    If $$$ISERR(status) Quit
    Do ..%PendingResponses.SetAt("",%name) Set ..%PendingTimeout=%name,..%PendingAlarmHandle=%alarmhandle,..%SyncName=""
 }
 If ..%PendingResponses.Count()=0 {
    Set ..%NextState="S28"
 } else {
    Set ..%NextState="S27",..%Wait=1
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S25") Goto Exit
}

Method S26(process As Ens.BusinessProcess, context As Ens.BP.Context, synctimedout As %Boolean, syncresponses As %ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"), request As %Library.Persistent, response As %Library.Persistent) As %Status [ Language = objectscript, PublicList = (process, context) ]
{
 Set $ZT="Trap",status=$$$OK do {
 If (0) {
 Set ..%NextState="S32"
 } else {
 Set ..%NextState="S33"
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S26") Goto Exit
}

Method S27(process As Ens.BusinessProcess, context As Ens.BP.Context, synctimedout As %Boolean, syncresponses As %ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"), request As %Library.Persistent, response As %Library.Persistent) As %Status [ Language = objectscript, PublicList = (process, context) ]
{
 Set $ZT="Trap",status=$$$OK do {
 If ..%PendingResponses.Count()=0 {
    Set ..%NextState="S28"
 } else {
    Set ..%NextState="S27",..%Wait=1
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S27") Goto Exit
}

Method S28(process As Ens.BusinessProcess, context As Ens.BP.Context, synctimedout As %Boolean, syncresponses As %ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"), request As %Library.Persistent, response As %Library.Persistent) As %Status [ Language = objectscript, PublicList = (process, context) ]
{
 Set $ZT="Trap",status=$$$OK do {
 Do ..%PendingResponses.Clear(),..%SyncResponses.Clear()
 Set ..%SyncTimedOut=0,..%PendingTimeout="",..%PendingAlarmHandle="",..%SyncName=""
 If ..%Process.IsResponsePending("Prefetch Ack") Do ..%PendingResponses.SetAt("","Prefetch Ack")
 If ..%PendingResponses.Count()>0 {
    Set %name="",%alarmhandle=""
    Set status=..%Process.MakeTimerCall("_Timeout",.%name,context.CPA.RetryInterval,"Prefetch Ack",.%alarmhandle,"Wait for asynchronous ack")
    If $$$ISERR(status) Quit
    Do ..%PendingResponses.SetAt("",%name) Set ..%PendingTimeout=%name,..%PendingAlarmHandle=%alarmhandle,..%SyncName="Wait for asynchronous ack"
 }
 If ..%PendingResponses.Count()=0 {
    Set ..%NextState="S30"
 } else {
    Set ..%NextState="S29",..%Wait=1
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S28") Goto Exit
}

Method S29(process As Ens.BusinessProcess, context As Ens.BP.Context, synctimedout As %Boolean, syncresponses As %ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"), request As %Library.Persistent, response As %Library.Persistent) As %Status [ Language = objectscript, PublicList = (process, context) ]
{
 Set $ZT="Trap",status=$$$OK do {
 If ..%PendingResponses.Count()=0 {
    Set ..%NextState="S30"
 } else {
    Set ..%NextState="S29",..%Wait=1
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S29") Goto Exit
}

Method S3(process As Ens.BusinessProcess, context As Ens.BP.Context, synctimedout As %Boolean, syncresponses As %ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"), request As %Library.Persistent, response As %Library.Persistent) As %Status [ Language = objectscript, PublicList = (process, context) ]
{
 Set $ZT="Trap",status=$$$OK do {
 Set ..%NextState="S4"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S3") Goto Exit
}

Method S30(process As Ens.BusinessProcess, context As Ens.BP.Context, synctimedout As %Boolean, syncresponses As %ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"), request As %Library.Persistent, response As %Library.Persistent) As %Status [ Language = objectscript, PublicList = (process, context) ]
{
 Set $ZT="Trap",status=$$$OK do {
 Set ..%NextState="S31"
 #; Remove this scopes fault handler
 $$$Pop(..%HandlerStack)
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S30") Goto Exit
}

Method S31(process As Ens.BusinessProcess, context As Ens.BP.Context, synctimedout As %Boolean, syncresponses As %ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"), request As %Library.Persistent, response As %Library.Persistent) As %Status [ Language = objectscript, PublicList = (process, context) ]
{
 Set $ZT="Trap",status=$$$OK do {
 If (($IsObject(context.Ack) && context.Ack.IsAcknowledgmentTo(request))) {
 Set ..%NextState="S35"
 } else {
 Set ..%NextState="S36"
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S31") Goto Exit
}

Method S32(process As Ens.BusinessProcess, context As Ens.BP.Context, synctimedout As %Boolean, syncresponses As %ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"), request As %Library.Persistent, response As %Library.Persistent) As %Status [ Language = objectscript, PublicList = (process, context) ]
{
 Set $ZT="Trap",status=$$$OK do {
 Set ..%NextState="S31"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S32") Goto Exit
}

Method S33(process As Ens.BusinessProcess, context As Ens.BP.Context, synctimedout As %Boolean, syncresponses As %ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"), request As %Library.Persistent, response As %Library.Persistent) As %Status [ Language = objectscript, PublicList = (process, context) ]
{
 Set $ZT="Trap",status=$$$OK do {
 Set status=$$$OK,context.Ack=$$$NULLOREF
 If $$$ISERR(status) Quit
 Set ..%NextState="S32"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S33") Goto Exit
}

Method S34(process As Ens.BusinessProcess, context As Ens.BP.Context, synctimedout As %Boolean, syncresponses As %ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"), request As %Library.Persistent, response As %Library.Persistent) As %Status [ Language = objectscript, PublicList = (process, context) ]
{
 Set $ZT="Trap",status=$$$OK do {
 Set status=$$$OK,status=context.ErrorStatus
 If $$$ISERR(status) Quit
 Set ..%NextState="S22"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S34") Goto Exit
}

Method S35(process As Ens.BusinessProcess, context As Ens.BP.Context, synctimedout As %Boolean, syncresponses As %ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"), request As %Library.Persistent, response As %Library.Persistent) As %Status [ Language = objectscript, PublicList = (process, context) ]
{
 Set $ZT="Trap",status=$$$OK do {
 Set ..%NextState="S23"
 Quit
 Set ..%NextState="S34"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S35") Goto Exit
}

Method S36(process As Ens.BusinessProcess, context As Ens.BP.Context, synctimedout As %Boolean, syncresponses As %ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"), request As %Library.Persistent, response As %Library.Persistent) As %Status [ Language = objectscript, PublicList = (process, context) ]
{
 Set $ZT="Trap",status=$$$OK do {
 Do ..%PendingResponses.Clear(),..%SyncResponses.Clear()
 Set ..%SyncTimedOut=0,..%PendingTimeout="",..%PendingAlarmHandle="",..%SyncName=""
 For tI=1:1:$Length(("RetryInterval"_context.Try),",") {
    If ..%Process.IsResponsePending($Piece(("RetryInterval"_context.Try),",",tI)) Do ..%PendingResponses.SetAt("",$Piece(("RetryInterval"_context.Try),",",tI))
 }
 If ..%PendingResponses.Count()>0 {
    Set %name="",%alarmhandle=""
    Set status=..%Process.MakeTimerCall("_Timeout",.%name,context.CPA.RetryInterval,("RetryInterval"_context.Try),.%alarmhandle,"Wait for RetryInterval")
    If $$$ISERR(status) Quit
    Do ..%PendingResponses.SetAt("",%name) Set ..%PendingTimeout=%name,..%PendingAlarmHandle=%alarmhandle,..%SyncName="Wait for RetryInterval"
 }
 If ..%PendingResponses.Count()=0 {
    Set ..%NextState="S38"
 } else {
    Set ..%NextState="S37",..%Wait=1
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S36") Goto Exit
}

Method S37(process As Ens.BusinessProcess, context As Ens.BP.Context, synctimedout As %Boolean, syncresponses As %ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"), request As %Library.Persistent, response As %Library.Persistent) As %Status [ Language = objectscript, PublicList = (process, context) ]
{
 Set $ZT="Trap",status=$$$OK do {
 If ..%PendingResponses.Count()=0 {
    Set ..%NextState="S38"
 } else {
    Set ..%NextState="S37",..%Wait=1
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S37") Goto Exit
}

Method S38(process As Ens.BusinessProcess, context As Ens.BP.Context, synctimedout As %Boolean, syncresponses As %ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"), request As %Library.Persistent, response As %Library.Persistent) As %Status [ Language = objectscript, PublicList = (process, context) ]
{
 Set $ZT="Trap",status=$$$OK do {
 Set status=$$$OK,context.Try=context.Try+1
 If $$$ISERR(status) Quit
 Set ..%NextState="S34"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S38") Goto Exit
}

Method S39(process As Ens.BusinessProcess, context As Ens.BP.Context, synctimedout As %Boolean, syncresponses As %ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"), request As %Library.Persistent, response As %Library.Persistent) As %Status [ Language = objectscript, PublicList = (process, context) ]
{
 Set $ZT="Trap",status=$$$OK do {
 Set ..%NextState="S2"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S39") Goto Exit
}

Method S4(process As Ens.BusinessProcess, context As Ens.BP.Context, synctimedout As %Boolean, syncresponses As %ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"), request As %Library.Persistent, response As %Library.Persistent) As %Status [ Language = objectscript, PublicList = (process, context) ]
{
 Set $ZT="Trap",status=$$$OK do {
 If (context.Try<context.CPA.Retries) {
  Set ..%NextState="S6"
 } else {
  Set ..%NextState="S5"
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S4") Goto Exit
}

Method S40(process As Ens.BusinessProcess, context As Ens.BP.Context, synctimedout As %Boolean, syncresponses As %ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"), request As %Library.Persistent, response As %Library.Persistent) As %Status [ Language = objectscript, PublicList = (process, context) ]
{
 Set $ZT="Trap",status=$$$OK do {
 Set status=$$$OK,status=$$$ERROR($$$EnsebXMLErrUndeliverableMessage)
 If $$$ISERR(status) Quit
 Set ..%NextState="S39"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S40") Goto Exit
}

Method S41(process As Ens.BusinessProcess, context As Ens.BP.Context, synctimedout As %Boolean, syncresponses As %ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"), request As %Library.Persistent, response As %Library.Persistent) As %Status [ Language = objectscript, PublicList = (process, context) ]
{
 Set $ZT="Trap",status=$$$OK do {
 #; --- Begin Call Dispatch Message ---
 #; --- Begin Request ---
 Set callrequest=##class(EnsLib.ebXML.Message).%New()
 If '$IsObject(callrequest) Set status=%objlasterror Quit
 Set status=$$$OK,callrequest=request
 If $$$ISERR(status) Quit
 Set status=..MakeAsyncCall("OnResponse4",process.OutboundTarget,callrequest,"Dispatch Message",1,0,"Dispatch Message",1)
 If $$$ISERR(status) Quit
 Kill callrequest
 #; --- End Request ---
 #; --- End Call Dispatch Message ---
 Do ..%PendingResponses.Clear(),..%SyncResponses.Clear()
 Set ..%SyncTimedOut=0,..%PendingTimeout="",..%PendingAlarmHandle="",..%SyncName=""
 If ..%Process.IsResponsePending("Dispatch Message") Do ..%PendingResponses.SetAt("","Dispatch Message")
 If ..%PendingResponses.Count()=0 {
    Set ..%NextState="S43"
 } else {
    Set ..%NextState="S42",..%Wait=1
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S41") Goto Exit
}

Method S42(process As Ens.BusinessProcess, context As Ens.BP.Context, synctimedout As %Boolean, syncresponses As %ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"), request As %Library.Persistent, response As %Library.Persistent) As %Status [ Language = objectscript, PublicList = (process, context) ]
{
 Set $ZT="Trap",status=$$$OK do {
 If ..%PendingResponses.Count()=0 {
    Set ..%NextState="S43"
 } else {
    Set ..%NextState="S42",..%Wait=1
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S42") Goto Exit
}

Method S43(process As Ens.BusinessProcess, context As Ens.BP.Context, synctimedout As %Boolean, syncresponses As %ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"), request As %Library.Persistent, response As %Library.Persistent) As %Status [ Language = objectscript, PublicList = (process, context) ]
{
 Set $ZT="Trap",status=$$$OK do {
 Set ..%NextState="S2"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S43") Goto Exit
}

Method S44(process As Ens.BusinessProcess, context As Ens.BP.Context, synctimedout As %Boolean, syncresponses As %ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"), request As %Library.Persistent, response As %Library.Persistent) As %Status [ Language = objectscript, PublicList = (process, context) ]
{
 Set $ZT="Trap",status=$$$OK do {
 Do process.ClearAllPendingResponses()
 Set ..%NextState="Stop"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S44") Goto Exit
}

Method S45(process As Ens.BusinessProcess, context As Ens.BP.Context, synctimedout As %Boolean, syncresponses As %ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"), request As %Library.Persistent, response As %Library.Persistent) As %Status [ Language = objectscript, PublicList = (process, context) ]
{
 Set $ZT="Trap",status=$$$OK do {
 Set status=$$$OK,response=$$$NULLOREF
 If $$$ISERR(status) Quit
 Set ..%NextState="S44"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S45") Goto Exit
}

Method S5(process As Ens.BusinessProcess, context As Ens.BP.Context, synctimedout As %Boolean, syncresponses As %ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"), request As %Library.Persistent, response As %Library.Persistent) As %Status [ Language = objectscript, PublicList = (process, context) ]
{
 Set $ZT="Trap",status=$$$OK do {
 If (('$IsObject(context.Ack) || 'context.Ack.IsAcknowledgmentTo(request))) {
 Set ..%NextState="S20"
 } else {
 Set ..%NextState="S19"
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S5") Goto Exit
}

Method S6(process As Ens.BusinessProcess, context As Ens.BP.Context, synctimedout As %Boolean, syncresponses As %ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"), request As %Library.Persistent, response As %Library.Persistent) As %Status [ Language = objectscript, PublicList = (process, context) ]
{
 Set $ZT="Trap",status=$$$OK do {
 #; --- Begin Call @("RetryInterval"_context.Try) ---
 #; --- Begin Request ---
 Set callrequest=##class(Ens.AlarmRequest).%New()
 If '$IsObject(callrequest) Set status=%objlasterror Quit
 Set status=$$$OK,callrequest.Timeout=context.CPA.RetryInterval
 If $$$ISERR(status) Quit
 Set status=..MakeAsyncCall("","Ens.Alarm",callrequest,("RetryInterval"_context.Try),0,0,("RetryInterval"_context.Try),0)
 If $$$ISERR(status) Quit
 Kill callrequest
 #; --- End Request ---
 #; --- End Call @("RetryInterval"_context.Try) ---
 #; Establish a state for the Scope beginning
 Set ..%NextState="S7"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S6") Goto Exit
}

Method S7(process As Ens.BusinessProcess, context As Ens.BP.Context, synctimedout As %Boolean, syncresponses As %ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"), request As %Library.Persistent, response As %Library.Persistent) As %Status [ Language = objectscript, PublicList = (process, context) ]
{
 Set $ZT="Trap",status=$$$OK do {
 #; Establish fault handler
 $$$Push("S8",..%HandlerStack)
 #; --- Begin Call Dispatch Message ---
 #; --- Begin Request ---
 Set callrequest=##class(EnsLib.ebXML.Message).%New()
 If '$IsObject(callrequest) Set status=%objlasterror Quit
 Set status=$$$OK,callrequest=request
 If $$$ISERR(status) Quit
 Set status=..MakeAsyncCall("OnResponse1",process.OutboundTarget,callrequest,"Dispatch Message",1,0,"Dispatch Message",1)
 If $$$ISERR(status) Quit
 Kill callrequest
 #; --- End Request ---
 #; --- End Call Dispatch Message ---
 Do ..%PendingResponses.Clear(),..%SyncResponses.Clear()
 Set ..%SyncTimedOut=0,..%PendingTimeout="",..%PendingAlarmHandle="",..%SyncName=""
 If ..%Process.IsResponsePending("Dispatch Message") Do ..%PendingResponses.SetAt("","Dispatch Message")
 If ..%PendingResponses.Count()>0 {
    Set %name="",%alarmhandle=""
    Set status=..%Process.MakeTimerCall("_Timeout",.%name,context.CPA.RetryInterval,"Dispatch Message",.%alarmhandle,"")
    If $$$ISERR(status) Quit
    Do ..%PendingResponses.SetAt("",%name) Set ..%PendingTimeout=%name,..%PendingAlarmHandle=%alarmhandle,..%SyncName=""
 }
 If ..%PendingResponses.Count()=0 {
    Set ..%NextState="S10"
 } else {
    Set ..%NextState="S9",..%Wait=1
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S7") Goto Exit
}

Method S8(process As Ens.BusinessProcess, context As Ens.BP.Context, synctimedout As %Boolean, syncresponses As %ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"), request As %Library.Persistent, response As %Library.Persistent) As %Status [ Language = objectscript, PublicList = (process, context) ]
{
 Set $ZT="Trap",status=$$$OK do {
 If (0) {
 Set ..%NextState="S12"
 } else {
 Set ..%NextState="S13"
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S8") Goto Exit
}

Method S9(process As Ens.BusinessProcess, context As Ens.BP.Context, synctimedout As %Boolean, syncresponses As %ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"), request As %Library.Persistent, response As %Library.Persistent) As %Status [ Language = objectscript, PublicList = (process, context) ]
{
 Set $ZT="Trap",status=$$$OK do {
 If ..%PendingResponses.Count()=0 {
    Set ..%NextState="S10"
 } else {
    Set ..%NextState="S9",..%Wait=1
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S9") Goto Exit
}

Storage Default
{
<Type>%Storage.Persistent</Type>
}

}
